<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>অবাধ খেলাঘর | Obadh Playground</title>
  <meta name="description" content="A modern Roman to Bengali transliteration engine">
  <meta name="theme-color" content="#4F46E5">

  <!-- Preload fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Hind+Siliguri:wght@300;400;500;600;700&family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">

  <!-- Tailwind CSS CDN -->
  <!-- <script src="https://cdn.tailwindcss.com"></script> -->
  
  <!-- Custom CSS -->
  <link rel="stylesheet" href="css/styles.css">
  
  <!-- Syntax Highlighting for JSON -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/json.min.js"></script>

  <!-- Initialize Alpine.js data -->
  <script>
    // Define debounce function
    function debounce(func, wait) {
      let timeout;
      return function(...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }

    // Define the Alpine.js data component
    document.addEventListener('alpine:init', () => {
      Alpine.data('obadh', () => ({
        inputText: '',
        result: {
          input: '',
          output: '',
          performance: null,
          token_analysis: null
        },
        mode: 'simple',
        showRawOutput: false,
        darkMode: false,
        version: '0.1.0',
        wasmLoaded: false,
        loadingError: null,
        
        init() {
          // Set up debounced transliteration
          this.debouncedTransliterate = debounce(this.doTransliterate.bind(this), 150);
          
          // Load dark mode preference
          this.loadThemePreference();
          
          // Check if WASM is already loaded
          if (window.obadhaWasm) {
            this.wasmLoaded = true;
            this.version = window.obadhaWasm.get_version();
          } else {
            // Wait for WASM to load
            window.addEventListener('wasm-loaded', (event) => {
              if (event.detail && event.detail.success) {
                this.wasmLoaded = true;
                this.loadingError = null;
                this.version = window.obadhaWasm.get_version();
                
                // Transliterate any text that might be in the input
                if (this.inputText.trim() !== '') {
                  this.debouncedTransliterate();
                }
              } else {
                this.loadingError = event.detail?.error || 'Unknown error loading Obadh Engine';
              }
            });
          }
          
          // Listen for system theme changes
          if (window.matchMedia) {
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {
              if (localStorage.getItem('theme') === null) {
                this.darkMode = e.matches;
                this.applyTheme();
              }
            });
          }
        },
        
        retryInitialization() {
          this.loadingError = null;
          window.initWasm();
        },
        
        setMode(newMode) {
          this.mode = newMode;
          if (this.inputText.trim() !== '') {
            this.debouncedTransliterate();
          }
        },
        
        clearText() {
          this.inputText = '';
          this.clearResult();
        },
        
        clearResult() {
          this.result = {
            input: '',
            output: '',
            performance: null,
            token_analysis: null
          };
        },
        
        toggleRawOutput() {
          this.showRawOutput = !this.showRawOutput;
          
          // Initialize syntax highlighting if showing raw output
          if (this.showRawOutput) {
            this.$nextTick(() => {
              this.updateCodeBlocks();
            });
          }
        },
        
        updateCodeBlocks() {
          const jsonString = JSON.stringify(this.result, null, 2);
          
          if (this.mode === 'debug') {
            const debugEl = this.$refs.jsonCodeDebug;
            if (debugEl) {
              debugEl.textContent = jsonString;
              hljs.highlightElement(debugEl);
            }
          } else if (this.mode === 'verbose') {
            const verboseEl = this.$refs.jsonCodeVerbose;
            if (verboseEl) {
              verboseEl.textContent = jsonString;
              hljs.highlightElement(verboseEl);
            }
          }
        },
        
        toggleDarkMode() {
          this.darkMode = !this.darkMode;
          this.saveThemePreference();
          this.applyTheme();
        },
        
        loadThemePreference() {
          // Check if there's a saved preference
          const savedTheme = localStorage.getItem('theme');
          if (savedTheme !== null) {
            this.darkMode = savedTheme === 'dark';
          } else {
            // Use system preference as default
            this.darkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
          }
          
          this.applyTheme();
        },
        
        saveThemePreference() {
          localStorage.setItem('theme', this.darkMode ? 'dark' : 'light');
        },
        
        applyTheme() {
          if (this.darkMode) {
            document.documentElement.classList.add('dark');
          } else {
            document.documentElement.classList.remove('dark');
          }
        },
        
        doTransliterate() {
          if (!this.wasmLoaded || !window.obadhaWasm) {
            console.warn('WASM not loaded yet, cannot transliterate');
            return;
          }
          
          // Don't process empty input
          if (this.inputText.trim() === '') {
            this.clearResult();
            return;
          }
          
          try {
            if (this.mode === 'simple') {
              // Use the simple transliteration method for better performance
              const output = window.obadhaWasm.transliterate(this.inputText);
              this.result = {
                input: this.inputText,
                output: output,
                performance: null,
                token_analysis: null
              };
            } else {
              // Use the verbose API for debug and verbose modes
              window.translitOptions.debug = true;
              window.translitOptions.verbose = this.mode === 'verbose';
              
              const resultJSON = window.obadhaWasm.transliterate_with_options(
                this.inputText, 
                window.translitOptions
              );
              
              this.result = resultJSON;
              
              // Initialize syntax highlighting if showing raw output
              if (this.showRawOutput) {
                this.$nextTick(() => {
                  this.updateCodeBlocks();
                });
              }
            }
          } catch (err) {
            console.error('Transliteration error:', err);
            this.result = {
              input: this.inputText,
              output: `Error: ${err.message || 'Could not transliterate text'}`,
              performance: null,
              token_analysis: null
            };
          }
        }
      }));
    });
  </script>
  
  <!-- Alpine.js CDN -->
  <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

  <!-- Tailwind Configuration -->
  <script>
    }
  </script>
  
  <style>
    /* Dark mode styles */
    .dark {
      color-scheme: dark;
    }
    
    .dark body {
      background-color: #1f2937;
      color: #f3f4f6;
    }
    
    .dark .bg-white {
      background-color: #374151;
    }
    
    .dark .bg-gray-50 {
      background-color: #1f2937;
    }
    
    .dark .text-gray-700 {
      color: #e5e7eb;
    }
    
    .dark .text-gray-600 {
      color: #d1d5db;
    }
    
    .dark .text-gray-900 {
      color: #f9fafb;
    }
    
    .dark .text-gray-500 {
      color: #9ca3af;
    }
    
    .dark .border-gray-300 {
      border-color: #4b5563;
    }
    
    .dark .border-gray-200 {
      border-color: #374151;
    }
    
    .dark .bg-gray-200 {
      background-color: #4b5563;
    }
    
    .dark .shadow-sm {
      box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.5);
    }
    
    /* Toggle switch styles */
    .toggle-switch {
      position: relative;
      display: inline-block;
      width: 48px;
      height: 24px;
    }
    
    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }
    
    .toggle-slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: .4s;
      border-radius: 24px;
    }
    
    .toggle-slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
    }
    
    input:checked + .toggle-slider {
      background-color: #22c55e;
    }
    
    input:checked + .toggle-slider:before {
      transform: translateX(24px);
    }
    
    .dark input:not(:checked) + .toggle-slider {
      background-color: #4b5563;
    }
  </style>
</head>
<body class="bg-gray-50">
  <div x-data="obadh" class="min-h-screen flex flex-col">
    <!-- Loading Overlay -->
    <div x-show="!wasmLoaded" class="fixed inset-0 bg-white dark:bg-gray-800 z-50 flex flex-col items-center justify-center">
      <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary-600"></div>
      <p class="mt-4 text-gray-700 dark:text-gray-300 font-medium">Loading Obadh Engine...</p>
      <p x-show="loadingError" class="mt-2 text-red-500 text-sm" x-text="loadingError"></p>
      <button 
        x-show="loadingError" 
        @click="retryInitialization()" 
        class="mt-4 px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors">
        Retry
      </button>
    </div>

    <!-- Header -->
    <header class="bg-white dark:bg-gray-800 shadow-sm py-4">
      <div class="container mx-auto px-4 flex justify-between items-center">
        <h1 class="text-2xl font-bold text-primary-600 font-bengali">
          <span class="mr-2">অবাধ</span>
          <span class="text-gray-700 dark:text-gray-300 text-xl font-normal">Playground</span>
        </h1>
        
        <div class="flex space-x-4 items-center">
          <!-- Dark Mode Toggle -->
          <button @click="toggleDarkMode" class="p-2 rounded-md text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
            <svg x-show="!darkMode" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
            </svg>
            <svg x-show="darkMode" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
            </svg>
          </button>
          
          <!-- GitHub Link -->
          <a href="https://github.com/yourusername/obadh_engine" target="_blank" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <path fill-rule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clip-rule="evenodd" />
            </svg>
          </a>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="flex-grow container mx-auto px-4 py-8">
      <div class="max-w-4xl mx-auto">
        <!-- Controls -->
        <div class="mb-6 flex flex-col sm:flex-row sm:items-center space-y-4 sm:space-y-0 sm:space-x-4">
          <div class="flex space-x-2">
            <button 
              @click="setMode('simple')" 
              :class="mode === 'simple' ? 'bg-primary-600 text-white' : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300'"
              class="px-4 py-2 rounded-md shadow-sm font-medium transition-colors">
              Simple
            </button>
            <button 
              @click="setMode('debug')" 
              :class="mode === 'debug' ? 'bg-primary-600 text-white' : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300'"
              class="px-4 py-2 rounded-md shadow-sm font-medium transition-colors">
              Debug
            </button>
            <button 
              @click="setMode('verbose')" 
              :class="mode === 'verbose' ? 'bg-primary-600 text-white' : 'bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300'"
              class="px-4 py-2 rounded-md shadow-sm font-medium transition-colors">
              Verbose
            </button>
          </div>
          
          <div class="ml-auto">
            <button 
              @click="clearText" 
              class="px-4 py-2 rounded-md shadow-sm font-medium bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors">
              Clear
            </button>
          </div>
        </div>

        <!-- Input Area -->
        <div class="mb-8">
          <div class="mb-2 flex justify-between items-center">
            <label for="input-text" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Roman Text</label>
            <span class="text-xs text-gray-500 dark:text-gray-400">Type in English</span>
          </div>
          <div class="relative">
            <textarea 
              id="input-text" 
              x-model="inputText" 
              @input="inputText.trim() === '' ? clearResult() : debouncedTransliterate()"
              class="block w-full rounded-md border-gray-300 dark:border-gray-600 shadow-sm focus:border-primary-500 focus:ring-primary-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 resize-none"
              rows="3"
              placeholder="Type here in Roman script to transliterate to Bengali..."
            ></textarea>
          </div>
        </div>

        <!-- Output Area -->
        <div>
          <div class="mb-2 flex justify-between items-center">
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Bengali Output</label>
            <div class="flex items-center space-x-2" x-show="mode !== 'simple'">
              <span class="text-xs text-gray-500 dark:text-gray-400" x-show="result.performance">
                Processing time: <span x-text="result.performance ? `${result.performance.total_ms.toFixed(2)} ms` : '0.00 ms'"></span>
              </span>
              <div class="flex items-center ml-3" x-show="mode !== 'simple' && inputText.trim() !== ''">
                <label class="toggle-switch">
                  <input type="checkbox" x-model="showRawOutput" @change="toggleRawOutput">
                  <span class="toggle-slider"></span>
                </label>
                <span class="ml-2 text-xs text-gray-500 dark:text-gray-400">Raw JSON</span>
              </div>
            </div>
          </div>

          <!-- Simple Output -->
          <div x-show="mode === 'simple'" class="bg-white dark:bg-gray-700 rounded-md shadow-sm p-4 min-h-16 border border-gray-300 dark:border-gray-600">
            <p class="text-lg font-bengali dark:text-gray-100" x-text="result.output || 'বাংলা লেখা এখানে প্রদর্শিত হবে'"></p>
          </div>

          <!-- Debug Output -->
          <div x-show="mode === 'debug' && !showRawOutput" class="bg-white dark:bg-gray-700 rounded-md shadow-sm p-4 border border-gray-300 dark:border-gray-600">
            <div class="mb-4">
              <p class="text-lg font-bengali dark:text-gray-100 mb-2" x-text="result.output || 'বাংলা লেখা এখানে প্রদর্শিত হবে'"></p>
              <div class="h-px bg-gray-200 dark:bg-gray-600 my-4"></div>
            </div>
            <div x-show="result.performance" class="text-sm">
              <h3 class="font-medium text-gray-900 dark:text-gray-100 mb-2">Performance Metrics</h3>
              <div class="grid grid-cols-2 gap-y-1">
                <div class="text-gray-600 dark:text-gray-400">Sanitize:</div>
                <div class="text-gray-900 dark:text-gray-100" x-text="`${result.performance?.sanitize_ms.toFixed(2)} ms`"></div>
                
                <div class="text-gray-600 dark:text-gray-400">Tokenize:</div>
                <div class="text-gray-900 dark:text-gray-100" x-text="`${result.performance?.tokenize_ms.toFixed(2)} ms`"></div>
                
                <div class="text-gray-600 dark:text-gray-400">Transliterate:</div>
                <div class="text-gray-900 dark:text-gray-100" x-text="`${result.performance?.transliterate_ms.toFixed(2)} ms`"></div>
                
                <div class="text-gray-600 dark:text-gray-400 font-medium">Total:</div>
                <div class="text-gray-900 dark:text-gray-100 font-medium" x-text="`${result.performance?.total_ms.toFixed(2)} ms`"></div>
              </div>
            </div>
          </div>

          <!-- Raw JSON Output for Debug Mode -->
          <div x-show="mode === 'debug' && showRawOutput" class="bg-white dark:bg-gray-700 rounded-md shadow-sm p-4 border border-gray-300 dark:border-gray-600">
            <pre class="text-sm overflow-x-auto max-h-72 p-2 bg-gray-50 dark:bg-gray-800 rounded"><code class="language-json" x-ref="jsonCodeDebug"></code></pre>
          </div>

          <!-- Verbose Output -->
          <div x-show="mode === 'verbose' && !showRawOutput" class="bg-white dark:bg-gray-700 rounded-md shadow-sm p-4 border border-gray-300 dark:border-gray-600">
            <div class="mb-4">
              <p class="text-lg font-bengali dark:text-gray-100 mb-2" x-text="result.output || 'বাংলা লেখা এখানে প্রদর্শিত হবে'"></p>
              <div class="h-px bg-gray-200 dark:bg-gray-600 my-4"></div>
            </div>
            
            <div x-show="result.performance" class="text-sm mb-4">
              <h3 class="font-medium text-gray-900 dark:text-gray-100 mb-2">Performance Metrics</h3>
              <div class="grid grid-cols-2 gap-y-1">
                <div class="text-gray-600 dark:text-gray-400">Sanitize:</div>
                <div class="text-gray-900 dark:text-gray-100" x-text="`${result.performance?.sanitize_ms.toFixed(2)} ms`"></div>
                
                <div class="text-gray-600 dark:text-gray-400">Tokenize:</div>
                <div class="text-gray-900 dark:text-gray-100" x-text="`${result.performance?.tokenize_ms.toFixed(2)} ms`"></div>
                
                <div class="text-gray-600 dark:text-gray-400">Transliterate:</div>
                <div class="text-gray-900 dark:text-gray-100" x-text="`${result.performance?.transliterate_ms.toFixed(2)} ms`"></div>
                
                <div class="text-gray-600 dark:text-gray-400 font-medium">Total:</div>
                <div class="text-gray-900 dark:text-gray-100 font-medium" x-text="`${result.performance?.total_ms.toFixed(2)} ms`"></div>
              </div>
            </div>
            
            <div x-show="result.token_analysis && result.token_analysis.length > 0" class="text-sm">
              <h3 class="font-medium text-gray-900 dark:text-gray-100 mb-2">Token Analysis</h3>
              <div class="space-y-3">
                <template x-for="(token, index) in result.token_analysis" :key="index">
                  <div class="border border-gray-200 dark:border-gray-600 rounded-md p-3">
                    <div class="grid grid-cols-2 gap-y-1 mb-2">
                      <div class="text-gray-600 dark:text-gray-400">Content:</div>
                      <div class="text-gray-900 dark:text-gray-100 font-mono" x-text="token.content"></div>
                      
                      <div class="text-gray-600 dark:text-gray-400">Position:</div>
                      <div class="text-gray-900 dark:text-gray-100" x-text="token.position"></div>
                      
                      <div class="text-gray-600 dark:text-gray-400">Type:</div>
                      <div class="text-gray-900 dark:text-gray-100" x-text="token.type"></div>
                    </div>
                    
                    <div x-show="token.phonetic_units && token.phonetic_units.length > 0">
                      <div class="text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Phonetic Units:</div>
                      <div class="pl-2 border-l-2 border-primary-200 dark:border-primary-800 space-y-1">
                        <template x-for="(unit, unitIndex) in token.phonetic_units" :key="unitIndex">
                          <div class="text-xs grid grid-cols-3 gap-x-2">
                            <div class="font-mono dark:text-gray-100" x-text="unit.text"></div>
                            <div class="text-gray-600 dark:text-gray-400" x-text="unit.type"></div>
                            <div class="text-gray-500 dark:text-gray-500" x-text="`pos: ${unit.position}`"></div>
                          </div>
                        </template>
                      </div>
                    </div>
                  </div>
                </template>
              </div>
            </div>
          </div>
          
          <!-- Raw JSON Output for Verbose Mode -->
          <div x-show="mode === 'verbose' && showRawOutput" class="bg-white dark:bg-gray-700 rounded-md shadow-sm p-4 border border-gray-300 dark:border-gray-600">
            <pre class="text-sm overflow-x-auto max-h-96 p-2 bg-gray-50 dark:bg-gray-800 rounded"><code class="language-json" x-ref="jsonCodeVerbose"></code></pre>
          </div>
        </div>
      </div>
    </main>

    <!-- Footer -->
    <footer class="bg-white dark:bg-gray-800 py-4 border-t border-gray-200 dark:border-gray-700">
      <div class="container mx-auto px-4">
        <p class="text-center text-sm text-gray-500 dark:text-gray-400">
          Powered by <span class="font-semibold text-primary-600 dark:text-primary-400">Obadh Engine</span> v<span x-text="version">0.1.0</span>
        </p>
      </div>
    </footer>
  </div>

  <!-- WASM loader and main JavaScript -->
  <script type="module">
    // Import the WASM module
    import init, { ObadhaWasm, TransliterationOptions } from './js/obadh_engine.js';

    // Initialize the WASM module with retry capability
    let initializationAttempts = 0;
    const MAX_RETRY_ATTEMPTS = 3;

    async function initWasm() {
      try {
        console.log('Initializing Obadh Engine WASM module...');
        initializationAttempts++;
        
        // Initialize the WASM module
        await init();
        console.log('WASM module initialized, creating engine instance...');
        
        // Create engine instance and options
        window.obadhaWasm = new ObadhaWasm();
        window.translitOptions = new TransliterationOptions();
        
        console.log('Obadh Engine WASM initialized successfully.');
        
        // Notify Alpine.js that initialization is complete
        window.dispatchEvent(new CustomEvent('wasm-loaded', { 
          detail: { success: true }
        }));
        
        return true;
      } catch (err) {
        console.error('WASM initialization error:', err);
        
        // Dispatch event with error details
        window.dispatchEvent(new CustomEvent('wasm-loaded', { 
          detail: { 
            success: false, 
            error: err.message || 'Failed to initialize WebAssembly module'
          }
        }));
        
        return false;
      }
    }

    // Expose initWasm to the global scope for retry functionality
    window.initWasm = initWasm;

    // Start initialization
    initWasm().catch(err => {
      console.error('Failed to initialize WASM:', err);
    });
  </script>
</body>
</html> 